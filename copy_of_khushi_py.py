# -*- coding: utf-8 -*-
"""Copy of khushi.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14yWfA8UnnRh-I8oNDYawO319EXRMR_VB
"""

a=5

type(a)

b=10.6

type(b)

c="*"

type(c)



A= True
type(A)

a=3
b=8
d=complex(a,b)
print(d)

list=[1,2,3,4,5,6]
print("maximum number in the list is:",max(list))

mylist=[1,2,3,4,5]
print(mylist[0])
print(mylist[1])
print(mylist[2])
print(mylist[4])
print(mylist[-1])
print(mylist[-2])
print(mylist[-3])
print(mylist[-4])
print(mylist[-0])

list=[1,2,3,4,5,6,7,8,9]
print("smallest no. in the list:",min(list))
print("greater no. in the list:",max(list))

#positive indexing
my_list = [10, 20, 30, 40, 50]
print(my_list[0])
print(my_list[2])

#negative indexing
my_list = [10, 20, 30, 40, 50]
print(my_list[-1])
print(my_list[-3])

list2=[1,3,5,7,9]
list3=[2,4,6,8,10]
list4=list2+list3
print(list4)
list4.insert(0,11)
print(list4)
list4.insert(0,17)
list4.insert(0,29)
print(list4)
print(len(list4))
list4[10]=100
list4[11]=200
list4[12]=300
print(list4)
list4.clear()
print(list4)
student=["khushi","trisha","shweta","harshita","divyanshi","viku"]
print(student)
print(student[1::4])

list1=[1,2,3,4,5,6]
print(max(list1))
Lst = [50,70,30,20,90,10,50]
print(Lst[::4])
print(Lst[-1::-5])
print(max(Lst))
print(min(Lst))

"""Write a py prog to set of 20 random number in the range of 15-45 .Count how many these numbers are greater than 30 and also perform the deletion of the no. which are greater than 35.

Wr a py prog make a empty set and then add five new names to the set ,to modify one existing name and delete two name in the set.

What is the diff btw discard and remove in the set explain wt the help of code . Perform the following operation on numeric set .

Union
Intersection
Difference

print first ten natural numbers using while loop
"""

i = 1

while i<= 10:
    print(i)
    i += 1

"""calculate the sum of all numbers from 1 to a given numbers in py


"""

def sum_of_numbers_up_to_n(n):
    return n * (n + 1) // 2
given_number = 10
result = sum_of_numbers_up_to_n(given_number)
print("The sum of all numbers from 1 to", given_number, "is:", result)

"""Write a program to display all prime numbers within a range"""

def is_prime(num):
    if num <= 1:
        return False
    if num == 2:
        return True
    if num % 2 == 0:
        return False
    for i in range(3, int(num ** 0.5) + 1, 2):
        if num % i == 0:
            return False
    return True

def display_primes(start, end):
    print(f"Prime numbers between {start} and {end}:")
    fo
        if is_prime(num):
            print(num, end=" ")

start = int(input("Enter the start of the range: "))
end = int(input("Enter the end of the range: "))
display_primes(start, end)



"""Write a program to print multiplication table of a given number

*   List item
*   List item

wap to create a set of 20 random numbers in the range of 15-45. count how many of these numbers are greater than 30 and also perform the deletion of the numbers which are greater than 35.
wap to create an empty set and add new names to the set, modify 2 existing names and delete an existing name in the set.
what is the difference between discard and remove function in the set. explain with the help of code.
perform the following operations on the numeric set. union, intersection, difference and symmetry difference
"""

import random
numbers = set()
while len(numbers) < 20:
    number = random.randint(15, 45)
    numbers.add(number)
print("Numbers greater than 30:")
for number in numbers:
    if number > 30:
        print(number)
        # Perform the division of the numbers which are greater than 35
print("Division of numbers greater than 35:")
for number in numbers:
    if number > 35:
        division = number / 5
        print(f"{number} / 5 = {division}")

# Create an empty set
names = set()

# Add 5 new names to the set
names.add('Yash')
names.add('Aman')
names.add('khushi')
names.add('Lily')
names.add('mafia')

# Print the set
print("Initial set:", names)

names.remove('Yash')
names.add('Shazeb')


print("Set after modifying a name:", names)


names.remove('Aman')
names.remove('khushi')

print("Set after deleting two names:", names)

# Create a set
my_set = {1, 2, 3, 4, 5}

# Using discard() - element present
my_set.discard(3)
print("Set after discarding 3:", my_set)  # Output: {1, 2, 4, 5}

# Using remove() - element present
my_set.remove(5)
print("Set after removing 5:", my_set)  # Output: {1, 2, 4}

# Using discard() - element not present
my_set.discard(10)
print("Set after discarding 10:", my_set)  # Output: {1, 2, 4}

# Using remove() - element not present
try:
    my_set.remove(10)
except KeyError as e:
    print("KeyError:", e)  # Output: KeyError: 10

print("Set after remove(10) - no change:", my_set)  # Output: {1, 2, 4}

#perform following operation on the numeric set
#union,intersection,difference &symetric difference



set1={1,2,3,5,6,8,18.56}
set2={6,8,1,15,45,7,10,7,0}

print("Union is: ",set1|set2)
print("Intersection is: ",set1&set2)
print("Difference is: ",set1-set2)
print("Semitric Difference is: ",set1^set2)

i=1
while i<=10:
  print(i)
  i+=1

#w.a.p to print the following number pattern using a loop.
1
1 2
1 2 3
1 2 3 4
1 2 3 4 5

# Creating a dictionary
my_dict = {
    "apple": 10,
    "banana": 20,
    "orange": 15,
    "grape": 25,
    "kiwi": 30
}

# Printing all keys
print("Keys:")
for key in my_dict.keys():
    print(key)

# Printing all values
print("\nValues:")
for value in my_dict.values():
    print(value)

# Printing the value corresponding to a particular key
key_to_search = "orange"
if key_to_search in my_dict:
    print(f"\nThe value corresponding to '{key_to_search}' is: {my_dict[key_to_search]}")
else:
    print(f"'{key_to_search}' not found in the dictionary.")



"""write a python program to create a dictionary of 5 elements also print all the keys and values respectively and also print the values corresponding to particular key
wap to create 3 dictionaries and concatenate them to create 4th dictionary
wap to check whether dictionary is empty or not
wap a python program to create a dictionary of person with height and further print all the names of those persons which have height less than 165 cm
suppose a dictionary contains roll no and names of students. wap to receive the rollno, extract the name corresponding to rollno and display a message congratulations to the student by his name. if the rollno does not exist in dictionary, the message should be only congratulations.
"""

#2
# Function to check if a dictionary is empty
def is_dict_empty(dictionary):
    return not bool(dictionary)

empty_dict = {}
non_empty_dict = {'a': 1}

print("Is empty_dict empty?", is_dict_empty(empty_dict))
print("Is non_empty_dict empty?", is_dict_empty(non_empty_dict))

# Function to check if a dictionary is empty
def is_dict_empty(dictionary):
    return not bool(dictionary)

# Example dictionaries
empty_dict = {}
non_empty_dict = {'a': 1}

# Checking if dictionaries are empty
print("Is empty_dict empty?", is_dict_empty(empty_dict))
print("Is non_empty_dict empty?", is_dict_empty(non_empty_dict))

# Creating a dictionary of persons with their heights
person_heights = {
    'Alice': 170,
    'rakesh': 160,
    'Charlie': 175,
    'khushi': 155,
    'Emily': 168
}

# Printing names of persons with height less than 165 cm
print("Persons with height less than 165 cm:")
for name, height in person_heights.items():
    if height < 165:
        print(name)

student_dict = {
    101: 'Alice',
    102: 'Bob',
    103: 'Charlie',
    104: 'Diana',
    105: 'Emily'
}


def congratulate_student(roll_no):
    if roll_no in student_dict:
        name = student_dict[roll_no]
        print("Congratulations to", name)
    else:
        print("Congratulations")

roll_number = int(input("Enter roll number: "))

congratulate_student(roll_number)

student_dict = {
    101: 'Alice',
    102: 'Bob',
    103: 'Charlie',
    104: 'Diana',
    105: 'Emily'
}

def congratulate_student(roll_no):
    if roll_no in student_dict:
        name = student_dict[roll_no]
        print("Congratulations to", name)
    else:
        print("Congratulations")

roll_number = int(input("Enter roll number: "))


congratulate_student(roll_number)

wap to create a set of 20 random numbers in the range of 15-45. count how many of these numbers are greater than 30 and also perform the deletion of the numbers which are greater than 35.
wap to create an empty set and add new names to the set, modify 2 existing names and delete an existing name in the set.
what is the difference between discard and remove function in the set. explain with the help of code.
perform the following operations on the numeric set. union, intersection, difference and symmetry difference

import random
numbers = set()
while len(numbers) < 20:
    number = random.randint(15, 45)
    numbers.add(number)
print("Numbers greater than 30:")
for number in numbers:
    if number > 30:
        print(number)
        # Perform the division of the numbers which are greater than 35
print("Division of numbers greater than 35:")
for number in numbers:
    if number > 35:
        division = number / 5
        print(f"{number} / 5 = {division}")

# Create an empty set
names = set()

# Add 5 new names to the set
names.add('Yash')
names.add('Aman')
names.add('khushi')
names.add('Lily')
names.add('mafia')

# Print the set
print("Initial set:", names)

names.remove('Yash')
names.add('Shazeb')


print("Set after modifying a name:", names)


names.remove('Aman')
names.remove('khushi')

print("Set after deleting two names:", names)

"""3. discard(element): This method removes the specified element from the set if it is present. If the element is not present, it does nothing (no error is raised). remove(element): This method also removes the specified element from the set if it is present. However, if the element is not present, it raises a KeyError"""

# Create a set
my_set = {1, 2, 3, 4, 5}

# Using discard() - element present
my_set.discard(3)
print("Set after discarding 3:", my_set)  # Output: {1, 2, 4, 5}

# Using remove() - element present
my_set.remove(5)
print("Set after removing 5:", my_set)  # Output: {1, 2, 4}

# Using discard() - element not present
my_set.discard(10)
print("Set after discarding 10:", my_set)  # Output: {1, 2, 4}

# Using remove() - element not present
try:
    my_set.remove(10)
except KeyError as e:
    print("KeyError:", e)  # Output: KeyError: 10

print("Set after remove(10) - no change:", my_set)  # Output: {1, 2, 4}

#perform following operation on the numeric set
#union,intersection,difference &symetric difference



set1={1,2,3,5,6,8,18.56}
set2={6,8,1,15,45,7,10,7,0}

print("Union is: ",set1|set2)
print("Intersection is: ",set1&set2)
print("Difference is: ",set1-set2)
print("Semitric Difference is: ",set1^set2)

import numpy as np

# Define two matrices
matrix1 = np.array([[1, 2, 3],
                    [4, 5, 6]])

matrix2 = np.array([[7, 8, 9],
                    [10, 11, 12]])

# Addition of two matrices
sum_matrix = matrix1 + matrix2

# Display the sum of matrices
print("Sum of two matrices:")
print(sum_matrix)

# Find the transpose of a matrix
transpose_matrix = np.transpose(matrix1)

# Display the transpose of matrix
print("\nTranspose of matrix:")
print(transpose_matrix)

"""#Write Python program using panda library for adding new column admission no.
 #to a data frame. Initially, there are 3 columns respectively name, and marks, and
 #have some dummy data for each column
"""

import pandas as pd
 # Dummy data for the initial DataFrame
 data = {
    'name': ['Alice', 'Bob', 'Charlie', 'David'],
    'marks': [85, 90, 78, 88]
 }
 # Create DataFrame
 df = pd.DataFrame(data)
 # Dummy admission numbers
 admission_nos = ['k0997', 'l0886', 'c8998', 'f5677']
 # Add the 'admission_no' column to the DataFrame
 df['admission_no'] = admission_nos
 # Print the DataFrame to see the changes
 print("DataFrame with added 'admission_no' column:")
 print(df)

DataFrame with added 'admission_no' column:
      name  marks admission_noAAab
 0    Alice     85         A123
 1      Bob     90         B456
 2  Charlie     78         C789
 3    David     88         D012
 #Use Matplotlib to write python program for draw a graph of two lines
 #intersecting each other while points for line1 at x axis- (1,2,3) and at y-axis at
 #(2,4,1) and for line2 points are- (1,2,3) at x axis and (4,1,3) at y-axis.
 import matplotlib.pyplot as plt
 # Points for line 1
 x1 = [1, 2, 3]
 y1 = [2, 4, 1]
 # Points for line 2
 x2 = [1, 2, 3]
 y2 = [4, 1, 3]
 # Plotting line 1
 plt plot(x1 y1 label='Line 1')

import matplotlib.pyplot as plt
x1=[1,2,3]
y1=[2,4,1]
x2=[1,2,3]
y2=[4,1,3]
plt.plot(x1,y1,label='line1')
plt.plot(x2,y2,label='line2')
plt.xlabel('x-axis')
plt.ylabel('y-axis')
plt.title('two intersecting lines ')
plt.legend()
plt.grid()
plt.show()

"""python mini project - my journal by khushi and pragati from cse8"""

import os
import getpass

def create_journal():
    global journal_name, journal_path, journal_file
    journal_name = input("Enter a name for your journal: ")
    journal_path = os.path.join(os.getcwd(), journal_name)
    os.makedirs(journal_path)
    create_password()
    journal_file = os.path.join(journal_path, "journal.txt")
    print(f"Journal '{journal_name}' created at {journal_path}")

def add_entry():
    entry_title = input("Enter a title for your entry: ")
    entry_content = getpass.getpass("Write your entry: ")
    entry_text = f"{entry_title}\n{entry_content}\n\n"
    with open(journal_file, "a") as f:
        f.write(entry_text)
    print(f"Entry '{entry_title}' added to journal.")

def view_entries():
    password = getpass.getpass("Enter your password: ")
    if password == journal_password:
        print("Your journal entries:")
        with open(journal_file, "r") as f:
            entries = f.read()
        print(entries)
    else:
        print("Incorrect password")

def create_password():
    global journal_password
    journal_password = getpass.getpass("Create a password for your journal: ")

def main():
    while True:
        print("\nJournal Diary\n")
        print("1. Create new journal")
        print("2. Add entry")
        print("3. View entries")
        print("4. Quit")
        option = input("Choose an option: ")
        if option == "1":
            create_journal()
        elif option == "2":
            add_entry()
        elif option == "3":
            view_entries()
        elif option == "4":
            break
        else:
            print("Invalid option, try again.")

if __name__ == "__main__":
    main()

"""write a python program to check wheather any given number is palindrome or not ."""

def is_pal(num):
    return str(num) == str(num)[::-1]

number = int(input("Enter a number: "))
if is_pal(number):
    print("it is Palindrome")
else:
    print("Not a palindrome")

"""using matplot lib to draw a square of side 4."""

import matplotlib.pyplot as plt

# side of the square is given as 4
x = [0, 4, 4, 0, 0]
y = [0, 0, 4, 4, 0]

# Plotting
plt.plot(x, y, 'b-')
plt.axis('equal')

plt.xlabel('X')
plt.ylabel('Y')
plt.title('Square with sides 4')

plt.show()

